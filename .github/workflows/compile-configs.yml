name: Aquila Build Configs

######################### Aquila #########################

on:
  workflow_dispatch:
  release:
    types: [released]

jobs:
  Build-UBL-ProUI-A1:            # UBL Pro for Aquila
    name: Build UBL Pro Files A1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        temp: [true,false]
        tjc: [true,false]
        pwr: [true,false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TP); then TPTMP=-MPC; else TPTMP=; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        if [ "$PWR" = true ] && [ "$TP" = true ]; then exit 0; fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${TPTMP}${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TP); then PTEMP='\/\/'; else PTEMP=; fi;
        sed -i "0,/^#define PIDTEMP/ s/.*#define PIDTEMP/${PTEMP}#define PIDTEMP/" Marlin/Configuration.h
        sed -i "s/.*#define PREHEAT_2_LABEL/${PTEMP}#define PREHEAT_2_LABEL/" Marlin/Configuration.h
        sed -i "s/.*#define USE_GRID_MESHVIEWER 1/${PTEMP}#define USE_GRID_MESHVIEWER 1/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PTEMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PTEMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($TP); then MTEMP=; else MTEMP='\/\/'; fi;
        sed -i "s/.*#define MPCTEMP/${MTEMP}#define MPCTEMP/" Marlin/Configuration.h
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TP: ${{ matrix.temp }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-ProUI-A2:            # UBL Pro for Aquila
    name: Build UBL Pro Pyscript A2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        temp: [true,false]
        tjc: [true,false]
        pwr: [true,false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TP); then TPTMP=-MPC; else TPTMP=; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        if [ "$PWR" = true ] && [ "$TP" = true ]; then
        chmod +x exitcode.py
        ./exitcode.py
        fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${TPTMP}${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TP); then PTEMP='\/\/'; else PTEMP=; fi;
        sed -i "0,/^#define PIDTEMP/ s/.*#define PIDTEMP/${PTEMP}#define PIDTEMP/" Marlin/Configuration.h
        sed -i "s/.*#define PREHEAT_2_LABEL/${PTEMP}#define PREHEAT_2_LABEL/" Marlin/Configuration.h
        sed -i "s/.*#define USE_GRID_MESHVIEWER 1/${PTEMP}#define USE_GRID_MESHVIEWER 1/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PTEMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PTEMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($TP); then MTEMP=; else MTEMP='\/\/'; fi;
        sed -i "s/.*#define MPCTEMP/${MTEMP}#define MPCTEMP/" Marlin/Configuration.h
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TP: ${{ matrix.temp }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-ProUI-A3:            # UBL Pro for Aquila
    name: Build UBL Pro AllIf A3
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        temp: [true,false]
        tjc: [true,false]
        pwr: [true,false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$PWR" = true ] && [ "$TP" = true ]; then A=
        else
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TP); then TPTMP=-MPC; else TPTMP=; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${TPTMP}${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TP); then PTEMP='\/\/'; else PTEMP=; fi;
        sed -i "0,/^#define PIDTEMP/ s/.*#define PIDTEMP/${PTEMP}#define PIDTEMP/" Marlin/Configuration.h
        sed -i "s/.*#define PREHEAT_2_LABEL/${PTEMP}#define PREHEAT_2_LABEL/" Marlin/Configuration.h
        sed -i "s/.*#define USE_GRID_MESHVIEWER 1/${PTEMP}#define USE_GRID_MESHVIEWER 1/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PTEMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PTEMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($TP); then MTEMP=; else MTEMP='\/\/'; fi;
        sed -i "s/.*#define MPCTEMP/${MTEMP}#define MPCTEMP/" Marlin/Configuration.h
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
        fi;
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TP: ${{ matrix.temp }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-ProUI-A4:            # UBL Pro for Aquila
    name: Build UBL Pro NoTP A4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        tjc: [true,false]
        pwr: [true,false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        if [ "$PWR" = true ] && [ "$TP" = true ]; then exit 0; fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-ProUI-A5:            # UBL Pro for Aquila
    name: Build UBL Pro TP=f A5
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        temp: [false]
        tjc: [true,false]
        pwr: [true,false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TP); then TPTMP=-MPC; else TPTMP=; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        if [ "$PWR" = true ] && [ "$TP" = true ]; then exit 0; fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${TPTMP}${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TP); then PTEMP='\/\/'; else PTEMP=; fi;
        sed -i "0,/^#define PIDTEMP/ s/.*#define PIDTEMP/${PTEMP}#define PIDTEMP/" Marlin/Configuration.h
        sed -i "s/.*#define PREHEAT_2_LABEL/${PTEMP}#define PREHEAT_2_LABEL/" Marlin/Configuration.h
        sed -i "s/.*#define USE_GRID_MESHVIEWER 1/${PTEMP}#define USE_GRID_MESHVIEWER 1/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PTEMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PTEMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($TP); then MTEMP=; else MTEMP='\/\/'; fi;
        sed -i "s/.*#define MPCTEMP/${MTEMP}#define MPCTEMP/" Marlin/Configuration.h
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TP: ${{ matrix.temp }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
  Build-UBL-ProUI-A6:            # UBL Pro for Aquila
    name: Build UBL Pro PWR=f A6
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chip: [GD32,N32]
        temp: [true,false]
        tjc: [true,false]
        pwr: [false]
        t13: [true,false]
    steps:
    - uses: actions/checkout@v3
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Cache pip
      uses: actions/cache@v3.3.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Cache PlatformIO
      uses: actions/cache@v3.3.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install PlatformIO
      run: |
        python3 -m pip install --upgrade pip
        pip install --upgrade pip
        pip install --upgrade wheel
        pip install --upgrade platformio
    - name: Run PlatformIO
      id: build_configs
      run: |
        if [ "$AQUILA_VER" = GD32 ]; then AVTMP="GD32"; else AVTMP="N32"; fi;
        if ($TP); then TPTMP=-MPC; else TPTMP=; fi;
        if ($TJC); then DTMP=TJC-; else DTMP=; fi;
        if ($PWR); then PLTMP=-PWRLOSS; else PLTMP=; fi;
        if ($T13); then TTMP=-SpriteT13; else TTMP=; fi;
        if [ "$PWR" = true ] && [ "$TP" = true ]; then exit 0; fi;
        echo "filename=${DTMP}Aquila${TTMP}_${AVTMP}_UBL-ProUI${TPTMP}${PLTMP}.bin" >> $GITHUB_OUTPUT
        > Marlin/Configuration.h
        > Marlin/Configuration_adv.h
        > Marlin/Version.h
        cp configurations/Voxelab\ Aquila/UBL/ConfigurationPro.h Marlin/Configuration.h
        cp configurations/Voxelab\ Aquila/UBL/Configuration_advPro.h Marlin/Configuration_adv.h
        cp configurations/Voxelab\ Aquila/UBL/Version.h Marlin/Version.h
        sed -i "s/default_envs =.*/default_envs = ${AQUILA_VER}F103RC_voxelab_maple/" platformio.ini
        if ($TP); then PTEMP='\/\/'; else PTEMP=; fi;
        sed -i "0,/^#define PIDTEMP/ s/.*#define PIDTEMP/${PTEMP}#define PIDTEMP/" Marlin/Configuration.h
        sed -i "s/.*#define PREHEAT_2_LABEL/${PTEMP}#define PREHEAT_2_LABEL/" Marlin/Configuration.h
        sed -i "s/.*#define USE_GRID_MESHVIEWER 1/${PTEMP}#define USE_GRID_MESHVIEWER 1/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PTEMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PTEMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($TP); then MTEMP=; else MTEMP='\/\/'; fi;
        sed -i "s/.*#define MPCTEMP/${MTEMP}#define MPCTEMP/" Marlin/Configuration.h
        if ($TJC); then TJEMP=; REMP='\/\/'; else TJEMP='\/\/'; REMP=; fi;
        sed -i "s/.*#define TJC_DISPLAY/${TJEMP}#define TJC_DISPLAY/" Marlin/Configuration.h
        sed -i "s/.*#define REVERSE_ENCODER_DIRECTION/${REMP}#define REVERSE_ENCODER_DIRECTION/" Marlin/Configuration.h
        if ($PWR); then PLMP='\/\/'; PRMP=; else PLMP=; PRMP='\/\/'; fi;
        sed -i "s/.*#define SHOW_SPEED_IND/${PLMP}#define SHOW_SPEED_IND/" Marlin/Configuration.h
        sed -i "s/.*#define HAS_CUSTOM_COLORS 1/${PLMP}#define HAS_CUSTOM_COLORS 1/" Marlin/Configuration.h
        sed -i "s/.*#define POWER_LOSS_RECOVERY/${PRMP}#define POWER_LOSS_RECOVERY/" Marlin/Configuration_adv.h
        sed -i "s/.*#define CAPABILITIES_REPORT/${PLMP}#define CAPABILITIES_REPORT/" Marlin/Configuration_adv.h
        if ($T13); then THMP="13"; else THMP="1"; fi;
        sed -i "s/.*#define TEMP_SENSOR_0 1/#define TEMP_SENSOR_0 ${THMP}/" Marlin/Configuration.h
        pio run
        mkdir temp
        mv .pio/build/${AQUILA_VER}F103RC_voxelab_maple/*.bin temp/build.bin
      env:
        AQUILA_VER: ${{ matrix.chip }}
        TP: ${{ matrix.temp }}
        TJC: ${{ matrix.tjc }}
        PWR: ${{ matrix.pwr }}
        T13: ${{ matrix.t13 }}
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: Upload Release Asset
      uses: tanyagray/action-upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: temp/build.bin
        asset_name: ${{ steps.build_configs.outputs.filename }}
        asset_content_type: application/x-binary
